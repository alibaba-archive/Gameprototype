// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class PlayerTeamDTODef {

  #region Extension registration
  public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
  }
  #endregion
  #region Static variables
  internal static pbd::MessageDescriptor internal__static_PlayerTeamDTOPB__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::PlayerTeamDTOPB, global::PlayerTeamDTOPB.Builder> internal__static_PlayerTeamDTOPB__FieldAccessorTable;
  #endregion
  #region Descriptor
  public static pbd::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbd::FileDescriptor descriptor;
  
  static PlayerTeamDTODef() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChZQbGF5ZXJUZWFtRFRPRGVmLnByb3RvIlMKD1BsYXllclRlYW1EVE9QQhIK", 
          "CgJpZBgBIAIoAxIQCghsZWFkZXJJZBgCIAIoAxIQCghtZW1iZXJJZBgDIAIo", 
          "CRIQCghzdGF0dXNlcxgEIAIoCUIdChtvcmcuZ2FtZXByb3RvdHlwZS5wcm90", 
        "by5zcmM="));
    pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
      descriptor = root;
      internal__static_PlayerTeamDTOPB__Descriptor = Descriptor.MessageTypes[0];
      internal__static_PlayerTeamDTOPB__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::PlayerTeamDTOPB, global::PlayerTeamDTOPB.Builder>(internal__static_PlayerTeamDTOPB__Descriptor,
              new string[] { "Id", "LeaderId", "MemberId", "Statuses", });
      return null;
    };
    pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
        new pbd::FileDescriptor[] {
        }, assigner);
  }
  #endregion
  
}
#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class PlayerTeamDTOPB : pb::GeneratedMessage<PlayerTeamDTOPB, PlayerTeamDTOPB.Builder> {
  private PlayerTeamDTOPB() { }
  private static readonly PlayerTeamDTOPB defaultInstance = new PlayerTeamDTOPB().MakeReadOnly();
  private static readonly string[] _playerTeamDTOPBFieldNames = new string[] { "id", "leaderId", "memberId", "statuses" };
  private static readonly uint[] _playerTeamDTOPBFieldTags = new uint[] { 8, 16, 26, 34 };
  public static PlayerTeamDTOPB DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override PlayerTeamDTOPB DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override PlayerTeamDTOPB ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::PlayerTeamDTODef.internal__static_PlayerTeamDTOPB__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<PlayerTeamDTOPB, PlayerTeamDTOPB.Builder> InternalFieldAccessors {
    get { return global::PlayerTeamDTODef.internal__static_PlayerTeamDTOPB__FieldAccessorTable; }
  }
  
  public const int IdFieldNumber = 1;
  private bool hasId;
  private long id_;
  public bool HasId {
    get { return hasId; }
  }
  public long Id {
    get { return id_; }
  }
  
  public const int LeaderIdFieldNumber = 2;
  private bool hasLeaderId;
  private long leaderId_;
  public bool HasLeaderId {
    get { return hasLeaderId; }
  }
  public long LeaderId {
    get { return leaderId_; }
  }
  
  public const int MemberIdFieldNumber = 3;
  private bool hasMemberId;
  private string memberId_ = "";
  public bool HasMemberId {
    get { return hasMemberId; }
  }
  public string MemberId {
    get { return memberId_; }
  }
  
  public const int StatusesFieldNumber = 4;
  private bool hasStatuses;
  private string statuses_ = "";
  public bool HasStatuses {
    get { return hasStatuses; }
  }
  public string Statuses {
    get { return statuses_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasId) return false;
      if (!hasLeaderId) return false;
      if (!hasMemberId) return false;
      if (!hasStatuses) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _playerTeamDTOPBFieldNames;
    if (hasId) {
      output.WriteInt64(1, field_names[0], Id);
    }
    if (hasLeaderId) {
      output.WriteInt64(2, field_names[1], LeaderId);
    }
    if (hasMemberId) {
      output.WriteString(3, field_names[2], MemberId);
    }
    if (hasStatuses) {
      output.WriteString(4, field_names[3], Statuses);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, Id);
    }
    if (hasLeaderId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, LeaderId);
    }
    if (hasMemberId) {
      size += pb::CodedOutputStream.ComputeStringSize(3, MemberId);
    }
    if (hasStatuses) {
      size += pb::CodedOutputStream.ComputeStringSize(4, Statuses);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static PlayerTeamDTOPB ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static PlayerTeamDTOPB ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static PlayerTeamDTOPB ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static PlayerTeamDTOPB ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static PlayerTeamDTOPB ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static PlayerTeamDTOPB ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static PlayerTeamDTOPB ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static PlayerTeamDTOPB ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static PlayerTeamDTOPB ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static PlayerTeamDTOPB ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private PlayerTeamDTOPB MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(PlayerTeamDTOPB prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<PlayerTeamDTOPB, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(PlayerTeamDTOPB cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private PlayerTeamDTOPB result;
    
    private PlayerTeamDTOPB PrepareBuilder() {
      if (resultIsReadOnly) {
        PlayerTeamDTOPB original = result;
        result = new PlayerTeamDTOPB();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override PlayerTeamDTOPB MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::PlayerTeamDTOPB.Descriptor; }
    }
    
    public override PlayerTeamDTOPB DefaultInstanceForType {
      get { return global::PlayerTeamDTOPB.DefaultInstance; }
    }
    
    public override PlayerTeamDTOPB BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is PlayerTeamDTOPB) {
        return MergeFrom((PlayerTeamDTOPB) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(PlayerTeamDTOPB other) {
      if (other == global::PlayerTeamDTOPB.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasLeaderId) {
        LeaderId = other.LeaderId;
      }
      if (other.HasMemberId) {
        MemberId = other.MemberId;
      }
      if (other.HasStatuses) {
        Statuses = other.Statuses;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_playerTeamDTOPBFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _playerTeamDTOPBFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasId = input.ReadInt64(ref result.id_);
            break;
          }
          case 16: {
            result.hasLeaderId = input.ReadInt64(ref result.leaderId_);
            break;
          }
          case 26: {
            result.hasMemberId = input.ReadString(ref result.memberId_);
            break;
          }
          case 34: {
            result.hasStatuses = input.ReadString(ref result.statuses_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasId {
      get { return result.hasId; }
    }
    public long Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    public Builder SetId(long value) {
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = 0L;
      return this;
    }
    
    public bool HasLeaderId {
      get { return result.hasLeaderId; }
    }
    public long LeaderId {
      get { return result.LeaderId; }
      set { SetLeaderId(value); }
    }
    public Builder SetLeaderId(long value) {
      PrepareBuilder();
      result.hasLeaderId = true;
      result.leaderId_ = value;
      return this;
    }
    public Builder ClearLeaderId() {
      PrepareBuilder();
      result.hasLeaderId = false;
      result.leaderId_ = 0L;
      return this;
    }
    
    public bool HasMemberId {
      get { return result.hasMemberId; }
    }
    public string MemberId {
      get { return result.MemberId; }
      set { SetMemberId(value); }
    }
    public Builder SetMemberId(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasMemberId = true;
      result.memberId_ = value;
      return this;
    }
    public Builder ClearMemberId() {
      PrepareBuilder();
      result.hasMemberId = false;
      result.memberId_ = "";
      return this;
    }
    
    public bool HasStatuses {
      get { return result.hasStatuses; }
    }
    public string Statuses {
      get { return result.Statuses; }
      set { SetStatuses(value); }
    }
    public Builder SetStatuses(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStatuses = true;
      result.statuses_ = value;
      return this;
    }
    public Builder ClearStatuses() {
      PrepareBuilder();
      result.hasStatuses = false;
      result.statuses_ = "";
      return this;
    }
  }
  static PlayerTeamDTOPB() {
    object.ReferenceEquals(global::PlayerTeamDTODef.Descriptor, null);
  }
}

#endregion


#endregion Designer generated code
